@startuml Pizzeria

!include data-structures.puml
!include menu.puml

title Sistema de Pizzaria
' skinparam linetype ortho


IUser <|-- ICustomer
"IImmutableList<T>" <-- ICustomer
ICustomer "1" *-- "n" IOrder
interface ICustomer {
  + GetOrders(): IImmutableList<IOrder>
  + AddOrder(order: IOrder): void
}

enum DeliveryManStatus {
  Offline
  Available
  OnDelivery
  Returning
  OnBreak
}

IUser <|-- IDeliveryMan
IDeliveryMan "1" *-- "n" IOrder
DeliveryManStatus <-- IDeliveryMan
interface IDeliveryMan {
  + SetStatus(status: DeliveryManStatus): void
  + GetStatus(): DeliveryManStatus
  + GetQueue(): IQueue<IOrder>
}

IDeliveryMan <|.. DeliveryMan
"IQueue<T>" <-- DeliveryMan
class DeliveryMan <<IQueue<IOrder>>> {
  - _ordersQueue: IQueue<IOrder>
  - _status: DeliveryManStatus
}

interface IUser {
  + Name: string
  + Address: string
}


OrderManager "1" o-- "n" IOrder
"IQueue<T>" <|.. OrderManager
"ILinkedList<T>" <-- OrderManager
class OrderManager <<IQueue<IOrder>>> {
  - _orders: ILinkedList<IOrder>
  + <<override>> Pop(): IOrder
}

enum OrderStatus {
  Received
  Preparing
  ReadyForPickup
  OutForDelivery
  Completed
  Cancelled
}

ICustomer <.. IOrder
OrderStatus <-- IOrder
IOrder "1" *-- "n" IEatable
interface IOrder {
  + Details: ICollection<IEatable>
  + GetPrice(): double
  + Customer: ICustomer
  + Status : OrderStatus
}



' TODO: Adicionar um sistema de estoque
@enduml
