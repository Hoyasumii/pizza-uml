@startuml DataStructures

title Estruturas BÃ¡sicas
skinparam linetype ortho

interface ICollection {
  + Size(): int
}

ICollection <|-- "IQueue<T>"
interface "IQueue<T>" {
  + <<virtual>> Push(data: T): void
  + <<virtual>> Pop(): T
  + Front(): T
  + Back(): T
}

interface "IIterableNode<T>" {
  + Value: T
  + SetNext(data: T): void
  + GetNext(): IIterableNode<T>
  + SetPrev(data: T): void
  + GetPrev(): IIterableNode<T>
}


ICollection <|-- "ILinkedList<T>"
"IIterableNode<T>" <-- "ILinkedList<T>"
interface "ILinkedList<T>" {
  + AddFirst(data: T): void
  + AddLast(data: T): void
  + RemoveFirst(): T?
  + RemoveLast(): T?
  + Remove(value: T): int?
  + RemoveByIndex(index: int): T?
  + GetHead(): IIterableNode<T>?
  + GetTail(): IIterableNode<T>?
  + FindByIndex(index: int): IIterableNode<T>?
}

ICollection <|-- "IImmutableList<T>"
interface "IImmutableList<T>" {
  + Add(data: T): this
  + FindByIndex(index: int): T?
}

ICollection <|-- "IHashMap<TKey, TValue>"
interface "IHashMap<TKey, TValue>" {
  + Add(TKey key, TValue value): void
  + Find(TKey key): TValue?
  + Remove(TKey key): TValue?
  + Exists(TKey key): bool
}

interface "IHashMapItem<TKey, TValue>" {
  + key: TKey
  + value: TValue
}

"IHashMap<TKey, TValue>" <|.. "HashMap<TKey, TValue>"
class "HashMap<TKey, TValue>" {
  - _buckets: IHashMapItem<TKey, TValue>[]
  - _loadFactor: double = 0.75
  - GetIndex(key: TKey): int
  - Resize(): void
  + HashMap(initialSize: int = 5): void
}

@end